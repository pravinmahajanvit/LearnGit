- name: Create Image tag
      #if: github.ref == 'refs/heads/master'
      if: github.event.inputs.environment == 'dev'
      id: image-tag
      run: |
        PACKAGE_VERSION=$(yq -oy -p xml .project.version pom.xml)
        GIT_SHA=$(git rev-parse --short HEAD)
        IMAGE_TAG=$GIT_SHA
        
        # Modify release information for pull requests vs master
        if [[ ${GITHUB_EVENT_NAME:-} = "pull_request" ]]; then
          # Add PR-XYZ-<shorthash> as prerelease string to chart version
          IMAGE_TAG="PR-$(jq -r .number $GITHUB_EVENT_PATH)-$GIT_SHA"
          CHART_VERSION="$PACKAGE_VERSION-$GIT_SHA"
        else
          IMAGE_TAG="$GIT_SHA"
          CHART_VERSION="$PACKAGE_VERSION-$GIT_SHA"
        fi
        
        # Output resulting values before build & upload
        echo "GIT_SHA=$GIT_SHA"
        echo "IMAGE_TAG=$IMAGE_TAG"
        echo "CHART_VERSION=$CHART_VERSION"
        
        echo "GIT_SHA=$(echo $GIT_SHA)" >> $GITHUB_ENV
        echo "IMAGE_TAG=$(echo $IMAGE_TAG)" >> $GITHUB_ENV
        echo "CHART_VERSION=$(echo $CHART_VERSION)" >> $GITHUB_ENV

    - name: Build, tag, and push the image to Amazon ECR
      id: build-image
      #if: github.ref == 'refs/heads/master'
      if: github.event.inputs.environment == 'dev'
      env:
        AWS_DEFAULT_REGION: us-east-1
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: alert-service
      run: |
        # Push the container image
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        #docker buildx build --push --platform=linux/amd64,linux/arm64 -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .

Deploy:
  needs: build
  name: 'Dev Continuous Deployment'
  runs-on: ubuntu-latest
  environment: dev
  #if: github.ref == 'refs/heads/master'
  if: github.event.inputs.environment == 'dev'
  env:
    HELM_INSTALL_NAME: alert-service
    CUSTOMER_NAME: dev
    DOMAIN: validus-dev.dev.validusarm.com
    IMAGE_TAG: ${{ needs.build.outputs.image_tag }}
    CHART_VERSION: ${{ needs.build.outputs.chart_version }}
    REGION: us-east-1
  defaults:
    run:
      shell: bash
  steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: Configure aws credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        role-to-assume: arn:aws:iam::822770624749:role/github-role
        aws-region: us-east-1

    - name: Configure Kubeconfig
      run: |
        aws eks update-kubeconfig --name eks-dev-cluster --region us-east-1
        kubectl config use-context arn:aws:eks:us-east-1:822770624749:cluster/eks-dev-cluster
        aws ecr get-login-password \
          --region us-east-1| helm registry login \
          --username AWS \
          --password-stdin 822770624749.dkr.ecr.${{env.REGION}}.amazonaws.com

    - name: Install or Upgrade Helm chart
      run: |
        helm upgrade ${{ env.HELM_INSTALL_NAME }} --install --atomic ./helm-alert-service -f ./helm-alert-service/values.yaml --set domain=${{ env.DOMAIN }} --set image.version=${{ env.IMAGE_TAG }} --set customer=${{ env.CUSTOMER_NAME }} --version ${{ env.CHART_VERSION }} --namespace ${{ env.CUSTOMER_NAME }} --create-namespace
